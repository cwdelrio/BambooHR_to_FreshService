import datetime
import time
import requests

bamboo_api_key = "<Your Bamboo API Key>"
system_current_time = datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"

# Time variable for debugging
# system_current_time = '2020-02-01T21:57:20Z'


# Access bamboo HR with api key, and pass a time to check if there have been any changes since
def check_for_new_emp(key, current_time):
    # Set the URL for bamboo employee last change information
    # Found at https://documentation.bamboohr.com/reference#get-changed-employees-table-data-1
    url = "https://api.bamboohr.com/api/gateway.php/<Your Domain>/v1/employees/changed"

    # Set up our query string
    querystring = {"since": current_time, "type": "inserted"}
    # querystring = {"since": current_time}
    print(current_time)
    # Set headers. API key and data type
    headers = {
        'authorization': 'Basic ' + key,
        'accept': 'application/json'
    }

    end_loop = False
    attempt_number = 0
    while not end_loop:
        # Query Bamboo to see if there has been a new employee since the last time this cycled.
        response = requests.request("GET", url, headers=headers, params=querystring)
        if response.status_code == 200:
            print("Response 200")
            return response.json()
        else:
            print("Call failed: " + response.reason + " Attempt number: " + attempt_number + "Trying again.")
            attempt_number = attempt_number + 1
            if attempt_number == 20:
                print("Max amount of attempts reached. Returning null data.")
                return
                

# Access bamboo HR with key
def get_emp(emp_id):
    url = "https://api.bamboohr.com/api/gateway.php/<Your Domain>/v1/employees/" + emp_id + "/"

    querystring = {"fields": "firstName,lastName,hireDate,jobTitle,department"}

    headers = {
        'accept': "application/json",
        'authorization': "Basic <Your FreshService API Key>"
    }

    response = requests.request("GET", url, headers=headers, params=querystring)
    return response.json()


# TODO TODO TODO This is the next function. This is where I left off.
# TODO create variable for fresh_api_key and bamboo_api_key
# Create ticket with information from get_emp
def create_fresh_ticket(emp):
    url = "https://<Your Domain>.freshservice.com/api/v2/tickets"

    ticket_subject = "New Hire: " + emp["firstName"] + " " + emp["lastName"] + " | Start Date: " + emp["hireDate"]

    if emp["jobTitle"]:
        ticket_subject = ticket_subject + " | " + emp["jobTitle"]

    if emp["department"]:
        ticket_subject = ticket_subject + " | " + emp["department"]

    print(ticket_subject)

    # Data used to create ticket
    payload = dict(ticket={
        'description': 'This is a ticket generated by BambooHR',
        'subject': ticket_subject,
        'email': '<Ticket Requester>',
        'priority': 1,
        'status': 2,
        'source': 2
    }, cc_emails=['<Managers Or Other CC>'])
    print(payload)

    headers = {
        'Content-Type': "application/json",
        'accept': "application/json",
        'authorization': "Basic aWF1bzEwamt3b1QwNTdESlRlOg=="
    }

    # fresh_response = requests.request("POST", url, headers=headers, data=payload)
    fresh_response = requests.post(url, headers=headers, json=payload)
    print(fresh_response.json())
    return


# Loop variable
new_emp_exists = False

# Run loop as long as there is no new employee
while not new_emp_exists:

    # Test var TODO Delete this
    print(system_current_time)

    # Set the json from bambooHR response to a variable.
    check_data = check_for_new_emp(bamboo_api_key, system_current_time)

    # TODO test vars, need to delete
    print(check_data)
    print(system_current_time)


    if not check_data:
        print("No check_data returned. Trying again with same time stamp.")
    # Check if the employee list is populated.
    elif check_data['employees'] is not None:
        print('New employee found!')
        new_emps = check_data["employees"]

        # This loops through the list of employees gathered by ID
        for emp in new_emps:
            # TODO vars for debugging, delete when finished
            print(emp)
            print("Getting employee from BambooHR: " + get_emp(emp))
            create_fresh_ticket(get_emp(emp))
            system_current_time = datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"

        # TODO this is here to stop the loop if there is a new employee. This is meant to run indefinetly. Keep this
        #   here for debugging but comment it out when this goes live
        # new_emp_exists = True
    else:
        print("Working")
        system_current_time = datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"

    # Get the current system time in UTC and format in ISO for the bambooHR server
    # Format yyyy-mm-ddThh:mm:ssZ
    
    # FIXME: I am using a sleep timer after this variable is created so the Since attribute in check_for_new_emp
    #   has time since it occured
    # TODO: write time to a file for storage when program is not running.

    # Wait 2 seconds for next loop
    time.sleep(2)

print("This program has stopped unexpectedly. Please confirm you have seen this: ")
x = input("This will end the program:")
